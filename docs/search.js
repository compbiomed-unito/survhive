window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "survhive", "modulename": "survhive", "kind": "module", "doc": "<p>SurvHive is a convenient, opinionated wrapper around some survival models, \nwith special emphasis on those based on deep neural networks.</p>\n"}, {"fullname": "survhive.adapter", "modulename": "survhive.adapter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "survhive.adapter.SurvivalEstimator", "modulename": "survhive.adapter", "qualname": "SurvivalEstimator", "kind": "class", "doc": "<p>This is a minimal (empty) estimator that passes the sk-learn check_estimator tests.</p>\n\n<p>Dataclasses can be useful to avoid long init functions and it appears to work.</p>\n\n<ul>\n<li>BaseEstimator include the get/set_params methods that are required.</li>\n<li>check_X_y and check_array implement checks (required by check_estimator function)\non the input data.</li>\n</ul>\n", "bases": "sklearn.base.BaseEstimator"}, {"fullname": "survhive.adapter.SurvivalEstimator.__init__", "modulename": "survhive.adapter", "qualname": "SurvivalEstimator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rng_seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "survhive.adapter.SurvivalEstimator.package", "modulename": "survhive.adapter", "qualname": "SurvivalEstimator.package", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "survhive.adapter.SurvivalEstimator.model", "modulename": "survhive.adapter", "qualname": "SurvivalEstimator.model", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "survhive.adapter.SurvivalEstimator.rng_seed", "modulename": "survhive.adapter", "qualname": "SurvivalEstimator.rng_seed", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "None"}, {"fullname": "survhive.adapter.SurvivalEstimator.fit", "modulename": "survhive.adapter", "qualname": "SurvivalEstimator.fit", "kind": "function", "doc": "<p>fit the model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.adapter.SurvivalEstimator.predict", "modulename": "survhive.adapter", "qualname": "SurvivalEstimator.predict", "kind": "function", "doc": "<p>do a prediction using a fit model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.adapter.SurvivalEstimator.predict_survival", "modulename": "survhive.adapter", "qualname": "SurvivalEstimator.predict_survival", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">times</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.adapter.SurvivalEstimator.score", "modulename": "survhive.adapter", "qualname": "SurvivalEstimator.score", "kind": "function", "doc": "<p>return the Harrell's c-index as a sklearn score</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.auton_adapters", "modulename": "survhive.auton_adapters", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "survhive.auton_adapters.DeepSurvivalMachines", "modulename": "survhive.auton_adapters", "qualname": "DeepSurvivalMachines", "kind": "class", "doc": "<p>Adapter for the DeepSurvivalMachines method from auton-survival</p>\n", "bases": "survhive.adapter.SurvivalEstimator"}, {"fullname": "survhive.auton_adapters.DeepSurvivalMachines.__init__", "modulename": "survhive.auton_adapters", "qualname": "DeepSurvivalMachines.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rng_seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_distr</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">distr_kind</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Weibull&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">32</span>,</span><span class=\"param\">\t<span class=\"n\">layer_sizes</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Sequence[int]&#39;</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">validation_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">max_epochs</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">torch_threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">elbo</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "survhive.auton_adapters.DeepSurvivalMachines.n_distr", "modulename": "survhive.auton_adapters", "qualname": "DeepSurvivalMachines.n_distr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "2"}, {"fullname": "survhive.auton_adapters.DeepSurvivalMachines.distr_kind", "modulename": "survhive.auton_adapters", "qualname": "DeepSurvivalMachines.distr_kind", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;Weibull&#x27;"}, {"fullname": "survhive.auton_adapters.DeepSurvivalMachines.batch_size", "modulename": "survhive.auton_adapters", "qualname": "DeepSurvivalMachines.batch_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "32"}, {"fullname": "survhive.auton_adapters.DeepSurvivalMachines.layer_sizes", "modulename": "survhive.auton_adapters", "qualname": "DeepSurvivalMachines.layer_sizes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": &#x27;Sequence[int]&#x27;"}, {"fullname": "survhive.auton_adapters.DeepSurvivalMachines.learning_rate", "modulename": "survhive.auton_adapters", "qualname": "DeepSurvivalMachines.learning_rate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.001"}, {"fullname": "survhive.auton_adapters.DeepSurvivalMachines.validation_size", "modulename": "survhive.auton_adapters", "qualname": "DeepSurvivalMachines.validation_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.1"}, {"fullname": "survhive.auton_adapters.DeepSurvivalMachines.max_epochs", "modulename": "survhive.auton_adapters", "qualname": "DeepSurvivalMachines.max_epochs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "100"}, {"fullname": "survhive.auton_adapters.DeepSurvivalMachines.torch_threads", "modulename": "survhive.auton_adapters", "qualname": "DeepSurvivalMachines.torch_threads", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "0"}, {"fullname": "survhive.auton_adapters.DeepSurvivalMachines.elbo", "modulename": "survhive.auton_adapters", "qualname": "DeepSurvivalMachines.elbo", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "survhive.auton_adapters.DeepSurvivalMachines.fit", "modulename": "survhive.auton_adapters", "qualname": "DeepSurvivalMachines.fit", "kind": "function", "doc": "<p>fit an auton-survival DeepSurvivalMachines model for single events</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.auton_adapters.DeepSurvivalMachines.predict_survival", "modulename": "survhive.auton_adapters", "qualname": "DeepSurvivalMachines.predict_survival", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.auton_adapters.DeepSurvivalMachines.predict", "modulename": "survhive.auton_adapters", "qualname": "DeepSurvivalMachines.predict", "kind": "function", "doc": "<p>predict probabilites of event at given times using DeepSurvivalMachines</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">eval_times</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.auton_adapters.DeepSurvivalMachines.get_parameter_grid", "modulename": "survhive.auton_adapters", "qualname": "DeepSurvivalMachines.get_parameter_grid", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">max_width</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.auton_adapters.DeepSurvivalMachines.set_predict_request", "modulename": "survhive.auton_adapters", "qualname": "DeepSurvivalMachines.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.datasets", "modulename": "survhive.datasets", "kind": "module", "doc": "<p>Some frequently used benchmark datasets for survival analysis</p>\n"}, {"fullname": "survhive.datasets.list_available_datasets", "modulename": "survhive.datasets", "qualname": "list_available_datasets", "kind": "function", "doc": "<p>list the available benchmark datasets</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.datasets.get_data", "modulename": "survhive.datasets", "qualname": "get_data", "kind": "function", "doc": "<p>Load one of the available benchmark datasets as a dataset object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">set_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.datasets.dataset", "modulename": "survhive.datasets", "qualname": "dataset", "kind": "class", "doc": "<p>a dataset container</p>\n"}, {"fullname": "survhive.datasets.dataset.__init__", "modulename": "survhive.datasets", "qualname": "dataset.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\tdataframe: Field(name=None,type=None,default=&lt;dataclasses._MISSING_TYPE object&gt;,default_factory=&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),_field_type=None)</span>)</span>"}, {"fullname": "survhive.datasets.dataset.name", "modulename": "survhive.datasets", "qualname": "dataset.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "survhive.datasets.dataset.dataframe", "modulename": "survhive.datasets", "qualname": "dataset.dataframe", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Field(name=None,type=None,default=&lt;dataclasses._MISSING_TYPE object at 0x7fab8ca24880&gt;,default_factory=&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),_field_type=None)"}, {"fullname": "survhive.datasets.dataset.get_X_y", "modulename": "survhive.datasets", "qualname": "dataset.get_X_y", "kind": "function", "doc": "<p>return dataset as two numpy ndarrays</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.datasets.dataset.index_zero_times", "modulename": "survhive.datasets", "qualname": "dataset.index_zero_times", "kind": "function", "doc": "<p>Return pandas indexes of event with a zero time.\nUsually these data points should be removed.\nRemoval can be performed <em>inplace</em> using the discard_zero_times method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.datasets.dataset.discard_zero_times", "modulename": "survhive.datasets", "qualname": "dataset.discard_zero_times", "kind": "function", "doc": "<p>In-place (side effects!) discard data points with zero times.\nReturns the new shape of the dataset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.lassonet_adapters", "modulename": "survhive.lassonet_adapters", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "survhive.lassonet_adapters.FastCPH", "modulename": "survhive.lassonet_adapters", "qualname": "FastCPH", "kind": "class", "doc": "<p>Adapter for the FastCPH method from lassonet</p>\n\n<p>NB: setting the parameter lambda_seq overrides the effects of\n    BOTH lambda_start and path_multiplier</p>\n", "bases": "survhive.adapter.SurvivalEstimator"}, {"fullname": "survhive.lassonet_adapters.FastCPH.__init__", "modulename": "survhive.lassonet_adapters", "qualname": "FastCPH.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rng_seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">layer_sizes</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Sequence[int]&#39;</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">tie_approximation</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;efron&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">lambda_seq</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Sequence[float]&#39;</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">lambda_start</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">path_multiplier</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.025</span>,</span><span class=\"param\">\t<span class=\"n\">backtrack</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">fit_lambda_</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "survhive.lassonet_adapters.FastCPH.package", "modulename": "survhive.lassonet_adapters", "qualname": "FastCPH.package", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;lassonet&#x27;"}, {"fullname": "survhive.lassonet_adapters.FastCPH.model_", "modulename": "survhive.lassonet_adapters", "qualname": "FastCPH.model_", "kind": "variable", "doc": "<p></p>\n", "default_value": "SurvivalEstimator(rng_seed=None)"}, {"fullname": "survhive.lassonet_adapters.FastCPH.layer_sizes", "modulename": "survhive.lassonet_adapters", "qualname": "FastCPH.layer_sizes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": &#x27;Sequence[int]&#x27;"}, {"fullname": "survhive.lassonet_adapters.FastCPH.tie_approximation", "modulename": "survhive.lassonet_adapters", "qualname": "FastCPH.tie_approximation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;efron&#x27;"}, {"fullname": "survhive.lassonet_adapters.FastCPH.lambda_seq", "modulename": "survhive.lassonet_adapters", "qualname": "FastCPH.lambda_seq", "kind": "variable", "doc": "<p></p>\n", "annotation": ": &#x27;Sequence[float]&#x27;"}, {"fullname": "survhive.lassonet_adapters.FastCPH.lambda_start", "modulename": "survhive.lassonet_adapters", "qualname": "FastCPH.lambda_start", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.001"}, {"fullname": "survhive.lassonet_adapters.FastCPH.path_multiplier", "modulename": "survhive.lassonet_adapters", "qualname": "FastCPH.path_multiplier", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "1.025"}, {"fullname": "survhive.lassonet_adapters.FastCPH.backtrack", "modulename": "survhive.lassonet_adapters", "qualname": "FastCPH.backtrack", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "survhive.lassonet_adapters.FastCPH.device", "modulename": "survhive.lassonet_adapters", "qualname": "FastCPH.device", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "survhive.lassonet_adapters.FastCPH.rng_seed", "modulename": "survhive.lassonet_adapters", "qualname": "FastCPH.rng_seed", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "None"}, {"fullname": "survhive.lassonet_adapters.FastCPH.verbose", "modulename": "survhive.lassonet_adapters", "qualname": "FastCPH.verbose", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "1"}, {"fullname": "survhive.lassonet_adapters.FastCPH.fit_lambda_", "modulename": "survhive.lassonet_adapters", "qualname": "FastCPH.fit_lambda_", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "None"}, {"fullname": "survhive.lassonet_adapters.FastCPH.fit", "modulename": "survhive.lassonet_adapters", "qualname": "FastCPH.fit", "kind": "function", "doc": "<p>fit the model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.lassonet_adapters.FastCPH.predict", "modulename": "survhive.lassonet_adapters", "qualname": "FastCPH.predict", "kind": "function", "doc": "<p>do a prediction using a fit model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.lassonet_adapters.FastCPH.predict_survival", "modulename": "survhive.lassonet_adapters", "qualname": "FastCPH.predict_survival", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.lassonet_adapters.FastCPH.get_parameter_grid", "modulename": "survhive.lassonet_adapters", "qualname": "FastCPH.get_parameter_grid", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">max_width</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.metrics", "modulename": "survhive.metrics", "kind": "module", "doc": "<p>Time-dependent score function have the signature (y_true, y_pred, times)</p>\n"}, {"fullname": "survhive.metrics.concordance_index_score", "modulename": "survhive.metrics", "qualname": "concordance_index_score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_true</span>, </span><span class=\"param\"><span class=\"n\">y_pred</span>, </span><span class=\"param\"><span class=\"n\">return_all</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.metrics.concordance_index_antolini_scorer", "modulename": "survhive.metrics", "qualname": "concordance_index_antolini_scorer", "kind": "function", "doc": "<p>Naive extension of concordance index to time-dependent predictions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">estimator</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">return_all</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.metrics.make_survival_scorer", "modulename": "survhive.metrics", "qualname": "make_survival_scorer", "kind": "function", "doc": "<p>Create a time-dependent survival scoring function for survival analysis.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>score_func (callable, with signature (y_pred, y_true)): A function that\ncomputes a score based on predicted and true values.</li>\n<li>needs (str, optional): The type of predictions needed. Either \"failure\"\nor \"survival\" probability predictions. Default is \"failure\".</li>\n<li>classification (bool, optional): If True, treat score_func as a\nclassification score and run it on positive/negative events computed\nseparately for each time point. Default is False.</li>\n<li>aggregate (str, optional): The method to aggregate scores over different\ntime points. Options include 'mean', 'median', 'sum', or 'no' for no\naggregation. Default is 'mean'.</li>\n<li>time_mode (str, optional): The mode for specifying prediction times.\nOptions are \"events\" (using event times), \"quantiles\" (using quantiles of\nevent times), or \"absolute\" (using specified absolute time values).\nDefault is \"events\".</li>\n<li>time_values (array-like or float, optional): The time values depending on\nthe chosen time_mode. If time_mode is \"events\", time_values should be\nNone. If time_mode is \"quantiles\", time_values should be an array of\nquantiles between 0 and 1. If time_mode is \"absolute\", time_values should\nbe an array-like object or a float representing absolute time values.</li>\n<li>**kwargs: Additional keyword arguments to be passed to the underlying\nscore_func.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>scorer (callable with signature (estimator, X, y)): A time-dependent\nscoring function that computes score_func at different time points and\naggregate the results.</li>\n</ul>\n\n<p>Notes:</p>\n\n<ul>\n<li>The resulting scorer can be used as a standard scikit-learn scorer with\nsurvival outcomes and survhive models. See the example</li>\n</ul>\n\n<pre><code>from survhive import CoxNet, load_test_data\nfrom sklearn.metrics import roc_auc_score, brier_score_loss\nroc_auc_at_quartiles = make_survival_scorer(roc_auc_score, classification=True,\n                                            time_mode='quantiles',\n                                            time_values=[0.25, 0.5, 0.75])\nbrier_at_quartiles = make_survival_scorer(lambda *args: -brier_score_loss(*args),\n                                          classification=True,\n                                          time_mode='quantiles',\n                                          time_values=[0.25, 0.5, 0.75]),\n\nX, y = load_test_data('veterans_lung_cancer')\n\ncross_val_score(CoxNet(), X, y, scoring=roc_auc_at_quartiles)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">score_func</span>,</span><span class=\"param\">\t<span class=\"n\">needs</span><span class=\"o\">=</span><span class=\"s1\">&#39;failure&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">classification</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">aggregate</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">time_mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;events&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">time_values</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.optimization", "modulename": "survhive.optimization", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "survhive.optimization.generate_topology_grid", "modulename": "survhive.optimization", "qualname": "generate_topology_grid", "kind": "function", "doc": "<p>return a list of net topologies to be used in hyperparameter optimization</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">max_width</span>, </span><span class=\"param\"><span class=\"n\">max_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.optimization.get_grid_size", "modulename": "survhive.optimization", "qualname": "get_grid_size", "kind": "function", "doc": "<p>calculate the number of points in a grid</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">grid</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.optimization.optimize", "modulename": "survhive.optimization", "qualname": "optimize", "kind": "function", "doc": "<p>hyperparameter optimization of estimator</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">estimator</span>,</span><span class=\"param\">\t<span class=\"n\">X</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;sklearn-grid&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">user_grid</span><span class=\"o\">=</span><span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">cv</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tries</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">refit</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.optimization.get_model_scores_df", "modulename": "survhive.optimization", "qualname": "get_model_scores_df", "kind": "function", "doc": "<p>Returns a pandas dataframe containing rank, avg_cv_score, std_cv_score,\nparams for each score specified in an optimization search result.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.optimization.get_model_top_ranking_df", "modulename": "survhive.optimization", "qualname": "get_model_top_ranking_df", "kind": "function", "doc": "<p>Returns a pandas dataframe containing the top-ranking solutions\nfor each score specified in an optimization search result.\nThis is a subset of what reported from the get_model_scores_df function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.pycox_adapters", "modulename": "survhive.pycox_adapters", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "survhive.pycox_adapters.DeepHitSingle", "modulename": "survhive.pycox_adapters", "qualname": "DeepHitSingle", "kind": "class", "doc": "<p>Adapter for the DeepHitSingle method from pycox</p>\n", "bases": "survhive.adapter.SurvivalEstimator"}, {"fullname": "survhive.pycox_adapters.DeepHitSingle.__init__", "modulename": "survhive.pycox_adapters", "qualname": "DeepHitSingle.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rng_seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">num_durations</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">layer_sizes</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Sequence[int]&#39;</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">epochs</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">64</span>,</span><span class=\"param\">\t<span class=\"n\">validation_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;cpu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "survhive.pycox_adapters.DeepHitSingle.package", "modulename": "survhive.pycox_adapters", "qualname": "DeepHitSingle.package", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;pycox&#x27;"}, {"fullname": "survhive.pycox_adapters.DeepHitSingle.model_", "modulename": "survhive.pycox_adapters", "qualname": "DeepHitSingle.model_", "kind": "variable", "doc": "<p></p>\n", "default_value": "SurvivalEstimator(rng_seed=None)"}, {"fullname": "survhive.pycox_adapters.DeepHitSingle.num_durations", "modulename": "survhive.pycox_adapters", "qualname": "DeepHitSingle.num_durations", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "10"}, {"fullname": "survhive.pycox_adapters.DeepHitSingle.layer_sizes", "modulename": "survhive.pycox_adapters", "qualname": "DeepHitSingle.layer_sizes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": &#x27;Sequence[int]&#x27;"}, {"fullname": "survhive.pycox_adapters.DeepHitSingle.epochs", "modulename": "survhive.pycox_adapters", "qualname": "DeepHitSingle.epochs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "100"}, {"fullname": "survhive.pycox_adapters.DeepHitSingle.batch_size", "modulename": "survhive.pycox_adapters", "qualname": "DeepHitSingle.batch_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "64"}, {"fullname": "survhive.pycox_adapters.DeepHitSingle.validation_size", "modulename": "survhive.pycox_adapters", "qualname": "DeepHitSingle.validation_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.1"}, {"fullname": "survhive.pycox_adapters.DeepHitSingle.learning_rate", "modulename": "survhive.pycox_adapters", "qualname": "DeepHitSingle.learning_rate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.001"}, {"fullname": "survhive.pycox_adapters.DeepHitSingle.dropout", "modulename": "survhive.pycox_adapters", "qualname": "DeepHitSingle.dropout", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.2"}, {"fullname": "survhive.pycox_adapters.DeepHitSingle.device", "modulename": "survhive.pycox_adapters", "qualname": "DeepHitSingle.device", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;cpu&#x27;"}, {"fullname": "survhive.pycox_adapters.DeepHitSingle.verbose", "modulename": "survhive.pycox_adapters", "qualname": "DeepHitSingle.verbose", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "survhive.pycox_adapters.DeepHitSingle.fit", "modulename": "survhive.pycox_adapters", "qualname": "DeepHitSingle.fit", "kind": "function", "doc": "<p>fit a Pycox DeepHit model for single events</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.pycox_adapters.DeepHitSingle.predict_survival", "modulename": "survhive.pycox_adapters", "qualname": "DeepHitSingle.predict_survival", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.pycox_adapters.DeepHitSingle.predict", "modulename": "survhive.pycox_adapters", "qualname": "DeepHitSingle.predict", "kind": "function", "doc": "<p>do a prediction using a fit model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.pycox_adapters.DeepHitSingle.get_parameter_grid", "modulename": "survhive.pycox_adapters", "qualname": "DeepHitSingle.get_parameter_grid", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">max_width</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.sksurv_adapters", "modulename": "survhive.sksurv_adapters", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "survhive.sksurv_adapters.SkSurvEstimator", "modulename": "survhive.sksurv_adapters", "qualname": "SkSurvEstimator", "kind": "class", "doc": "<p>Adapter for the scikit-survival methods</p>\n", "bases": "survhive.adapter.SurvivalEstimator"}, {"fullname": "survhive.sksurv_adapters.SkSurvEstimator.package", "modulename": "survhive.sksurv_adapters", "qualname": "SkSurvEstimator.package", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;scikit-survival&#x27;"}, {"fullname": "survhive.sksurv_adapters.SkSurvEstimator.model_", "modulename": "survhive.sksurv_adapters", "qualname": "SkSurvEstimator.model_", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "survhive.sksurv_adapters.SkSurvEstimator.verbose", "modulename": "survhive.sksurv_adapters", "qualname": "SkSurvEstimator.verbose", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "survhive.sksurv_adapters.SkSurvEstimator.fit", "modulename": "survhive.sksurv_adapters", "qualname": "SkSurvEstimator.fit", "kind": "function", "doc": "<p>fit the model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.sksurv_adapters.SkSurvEstimator.predict", "modulename": "survhive.sksurv_adapters", "qualname": "SkSurvEstimator.predict", "kind": "function", "doc": "<p>do a prediction using a fit model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.sksurv_adapters.SkSurvEstimator.predict_survival", "modulename": "survhive.sksurv_adapters", "qualname": "SkSurvEstimator.predict_survival", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.sksurv_adapters.SkSurvEstimator.get_parameter_grid", "modulename": "survhive.sksurv_adapters", "qualname": "SkSurvEstimator.get_parameter_grid", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">max_width</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.sksurv_adapters.CoxNet", "modulename": "survhive.sksurv_adapters", "qualname": "CoxNet", "kind": "class", "doc": "<p>Adapter for the CoxNet method from scikit-survival</p>\n", "bases": "SkSurvEstimator"}, {"fullname": "survhive.sksurv_adapters.CoxNet.__init__", "modulename": "survhive.sksurv_adapters", "qualname": "CoxNet.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rng_seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">l1_ratio</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span></span>)</span>"}, {"fullname": "survhive.sksurv_adapters.CoxNet.model_", "modulename": "survhive.sksurv_adapters", "qualname": "CoxNet.model_", "kind": "variable", "doc": "<p></p>\n", "default_value": "CoxnetSurvivalAnalysis()"}, {"fullname": "survhive.sksurv_adapters.CoxNet.alpha", "modulename": "survhive.sksurv_adapters", "qualname": "CoxNet.alpha", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "None"}, {"fullname": "survhive.sksurv_adapters.CoxNet.l1_ratio", "modulename": "survhive.sksurv_adapters", "qualname": "CoxNet.l1_ratio", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.5"}, {"fullname": "survhive.sksurv_adapters.CoxNet.fit", "modulename": "survhive.sksurv_adapters", "qualname": "CoxNet.fit", "kind": "function", "doc": "<p>fit the model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.sksurv_adapters.CoxNet.predict", "modulename": "survhive.sksurv_adapters", "qualname": "CoxNet.predict", "kind": "function", "doc": "<p>do a prediction using a fit model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.sksurv_adapters.CoxNet.predict_survival", "modulename": "survhive.sksurv_adapters", "qualname": "CoxNet.predict_survival", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.sksurv_adapters.CoxNet.get_parameter_grid", "modulename": "survhive.sksurv_adapters", "qualname": "CoxNet.get_parameter_grid", "kind": "function", "doc": "<p>Generate default parameter grid for optimization\nHere max_width does nothing, it is pesent to keep the API uniform\nwith the deep-learning-based methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">max_width</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.sksurv_adapters.RSF", "modulename": "survhive.sksurv_adapters", "qualname": "RSF", "kind": "class", "doc": "<p>Adapter for the RandomSurvivalForest method from scikit-survival</p>\n", "bases": "SkSurvEstimator"}, {"fullname": "survhive.sksurv_adapters.RSF.__init__", "modulename": "survhive.sksurv_adapters", "qualname": "RSF.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rng_seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_estimators</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">max_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">min_samples_split</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">min_samples_leaf</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.05</span></span>)</span>"}, {"fullname": "survhive.sksurv_adapters.RSF.model_", "modulename": "survhive.sksurv_adapters", "qualname": "RSF.model_", "kind": "variable", "doc": "<p></p>\n", "default_value": "RandomSurvivalForest()"}, {"fullname": "survhive.sksurv_adapters.RSF.n_estimators", "modulename": "survhive.sksurv_adapters", "qualname": "RSF.n_estimators", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "100"}, {"fullname": "survhive.sksurv_adapters.RSF.max_depth", "modulename": "survhive.sksurv_adapters", "qualname": "RSF.max_depth", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "None"}, {"fullname": "survhive.sksurv_adapters.RSF.min_samples_split", "modulename": "survhive.sksurv_adapters", "qualname": "RSF.min_samples_split", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.1"}, {"fullname": "survhive.sksurv_adapters.RSF.min_samples_leaf", "modulename": "survhive.sksurv_adapters", "qualname": "RSF.min_samples_leaf", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.05"}, {"fullname": "survhive.sksurv_adapters.RSF.fit", "modulename": "survhive.sksurv_adapters", "qualname": "RSF.fit", "kind": "function", "doc": "<p>fit the model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.sksurv_adapters.RSF.get_parameter_grid", "modulename": "survhive.sksurv_adapters", "qualname": "RSF.get_parameter_grid", "kind": "function", "doc": "<p>Generate default parameter grid for optimization\nHere max_width does nothing, it is pesent to keep the API uniform\nwith the deep-learning-based methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">max_width</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.sksurv_adapters.CoxPH", "modulename": "survhive.sksurv_adapters", "qualname": "CoxPH", "kind": "class", "doc": "<p>Adapter for a simulated Cox Proportional Hazard (CoxPH) method from scikit-survival\nUse it only for baseline calculations, otherwise use CoxNet.</p>\n", "bases": "SkSurvEstimator"}, {"fullname": "survhive.sksurv_adapters.CoxPH.__init__", "modulename": "survhive.sksurv_adapters", "qualname": "CoxPH.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rng_seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">ties</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;efron&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "survhive.sksurv_adapters.CoxPH.model_", "modulename": "survhive.sksurv_adapters", "qualname": "CoxPH.model_", "kind": "variable", "doc": "<p></p>\n", "default_value": "CoxPHSurvivalAnalysis()"}, {"fullname": "survhive.sksurv_adapters.CoxPH.alpha", "modulename": "survhive.sksurv_adapters", "qualname": "CoxPH.alpha", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "survhive.sksurv_adapters.CoxPH.ties", "modulename": "survhive.sksurv_adapters", "qualname": "CoxPH.ties", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;efron&#x27;"}, {"fullname": "survhive.sksurv_adapters.CoxPH.verbose", "modulename": "survhive.sksurv_adapters", "qualname": "CoxPH.verbose", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "survhive.sksurv_adapters.CoxPH.fit", "modulename": "survhive.sksurv_adapters", "qualname": "CoxPH.fit", "kind": "function", "doc": "<p>fit the model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.sksurv_adapters.CoxPH.predict_survival", "modulename": "survhive.sksurv_adapters", "qualname": "CoxPH.predict_survival", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.sksurv_adapters.CoxPH.get_parameter_grid", "modulename": "survhive.sksurv_adapters", "qualname": "CoxPH.get_parameter_grid", "kind": "function", "doc": "<p>Generate default parameter grid for optimization.\nHere max_width does nothing, it is present to keep the API uniform\nwith the deep-learning-based methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">max_width</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.sksurv_adapters.GrBoostSA", "modulename": "survhive.sksurv_adapters", "qualname": "GrBoostSA", "kind": "class", "doc": "<p>Adapter for the GradientBoostingSurvivalAnalysis method from scikit-survival</p>\n", "bases": "SkSurvEstimator"}, {"fullname": "survhive.sksurv_adapters.GrBoostSA.__init__", "modulename": "survhive.sksurv_adapters", "qualname": "GrBoostSA.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rng_seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_estimators</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">max_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">min_samples_split</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">min_samples_leaf</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">validation_fraction</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">patience</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span></span>)</span>"}, {"fullname": "survhive.sksurv_adapters.GrBoostSA.model_", "modulename": "survhive.sksurv_adapters", "qualname": "GrBoostSA.model_", "kind": "variable", "doc": "<p></p>\n", "default_value": "GradientBoostingSurvivalAnalysis()"}, {"fullname": "survhive.sksurv_adapters.GrBoostSA.n_estimators", "modulename": "survhive.sksurv_adapters", "qualname": "GrBoostSA.n_estimators", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "100"}, {"fullname": "survhive.sksurv_adapters.GrBoostSA.max_depth", "modulename": "survhive.sksurv_adapters", "qualname": "GrBoostSA.max_depth", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "None"}, {"fullname": "survhive.sksurv_adapters.GrBoostSA.min_samples_split", "modulename": "survhive.sksurv_adapters", "qualname": "GrBoostSA.min_samples_split", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.1"}, {"fullname": "survhive.sksurv_adapters.GrBoostSA.min_samples_leaf", "modulename": "survhive.sksurv_adapters", "qualname": "GrBoostSA.min_samples_leaf", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.05"}, {"fullname": "survhive.sksurv_adapters.GrBoostSA.validation_fraction", "modulename": "survhive.sksurv_adapters", "qualname": "GrBoostSA.validation_fraction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.1"}, {"fullname": "survhive.sksurv_adapters.GrBoostSA.patience", "modulename": "survhive.sksurv_adapters", "qualname": "GrBoostSA.patience", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "5"}, {"fullname": "survhive.sksurv_adapters.GrBoostSA.fit", "modulename": "survhive.sksurv_adapters", "qualname": "GrBoostSA.fit", "kind": "function", "doc": "<p>fit the model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.sksurv_adapters.GrBoostSA.get_parameter_grid", "modulename": "survhive.sksurv_adapters", "qualname": "GrBoostSA.get_parameter_grid", "kind": "function", "doc": "<p>Generate default parameter grid for optimization\nHere max_width does nothing, it is pesent to keep the API uniform\nwith the deep-learning-based methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">max_width</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.survtrace_adapters", "modulename": "survhive.survtrace_adapters", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "survhive.survtrace_adapters.SurvTraceSingle", "modulename": "survhive.survtrace_adapters", "qualname": "SurvTraceSingle", "kind": "class", "doc": "<p>Adapter for the SurvTraceSingle method from SurvTRACE</p>\n", "bases": "survhive.adapter.SurvivalEstimator"}, {"fullname": "survhive.survtrace_adapters.SurvTraceSingle.__init__", "modulename": "survhive.survtrace_adapters", "qualname": "SurvTraceSingle.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rng_seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">num_durations</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">horizons</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Sequence[float]&#39;</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">hidden_factor</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">intermediate_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">64</span>,</span><span class=\"param\">\t<span class=\"n\">num_hidden_layers</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">num_attention_heads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">validation_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">hidden_dropout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">attention_dropout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">patience</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">64</span>,</span><span class=\"param\">\t<span class=\"n\">epochs</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "survhive.survtrace_adapters.SurvTraceSingle.package", "modulename": "survhive.survtrace_adapters", "qualname": "SurvTraceSingle.package", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;survtrace&#x27;"}, {"fullname": "survhive.survtrace_adapters.SurvTraceSingle.model_", "modulename": "survhive.survtrace_adapters", "qualname": "SurvTraceSingle.model_", "kind": "variable", "doc": "<p></p>\n", "default_value": "SurvivalEstimator(rng_seed=None)"}, {"fullname": "survhive.survtrace_adapters.SurvTraceSingle.num_durations", "modulename": "survhive.survtrace_adapters", "qualname": "SurvTraceSingle.num_durations", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "5"}, {"fullname": "survhive.survtrace_adapters.SurvTraceSingle.horizons", "modulename": "survhive.survtrace_adapters", "qualname": "SurvTraceSingle.horizons", "kind": "variable", "doc": "<p></p>\n", "annotation": ": &#x27;Sequence[float]&#x27;"}, {"fullname": "survhive.survtrace_adapters.SurvTraceSingle.hidden_factor", "modulename": "survhive.survtrace_adapters", "qualname": "SurvTraceSingle.hidden_factor", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "4"}, {"fullname": "survhive.survtrace_adapters.SurvTraceSingle.intermediate_size", "modulename": "survhive.survtrace_adapters", "qualname": "SurvTraceSingle.intermediate_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "64"}, {"fullname": "survhive.survtrace_adapters.SurvTraceSingle.num_hidden_layers", "modulename": "survhive.survtrace_adapters", "qualname": "SurvTraceSingle.num_hidden_layers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "3"}, {"fullname": "survhive.survtrace_adapters.SurvTraceSingle.num_attention_heads", "modulename": "survhive.survtrace_adapters", "qualname": "SurvTraceSingle.num_attention_heads", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "2"}, {"fullname": "survhive.survtrace_adapters.SurvTraceSingle.validation_size", "modulename": "survhive.survtrace_adapters", "qualname": "SurvTraceSingle.validation_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.1"}, {"fullname": "survhive.survtrace_adapters.SurvTraceSingle.hidden_dropout", "modulename": "survhive.survtrace_adapters", "qualname": "SurvTraceSingle.hidden_dropout", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "survhive.survtrace_adapters.SurvTraceSingle.attention_dropout", "modulename": "survhive.survtrace_adapters", "qualname": "SurvTraceSingle.attention_dropout", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.1"}, {"fullname": "survhive.survtrace_adapters.SurvTraceSingle.patience", "modulename": "survhive.survtrace_adapters", "qualname": "SurvTraceSingle.patience", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "5"}, {"fullname": "survhive.survtrace_adapters.SurvTraceSingle.batch_size", "modulename": "survhive.survtrace_adapters", "qualname": "SurvTraceSingle.batch_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "64"}, {"fullname": "survhive.survtrace_adapters.SurvTraceSingle.epochs", "modulename": "survhive.survtrace_adapters", "qualname": "SurvTraceSingle.epochs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "100"}, {"fullname": "survhive.survtrace_adapters.SurvTraceSingle.rng_seed", "modulename": "survhive.survtrace_adapters", "qualname": "SurvTraceSingle.rng_seed", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "None"}, {"fullname": "survhive.survtrace_adapters.SurvTraceSingle.device", "modulename": "survhive.survtrace_adapters", "qualname": "SurvTraceSingle.device", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "survhive.survtrace_adapters.SurvTraceSingle.fit", "modulename": "survhive.survtrace_adapters", "qualname": "SurvTraceSingle.fit", "kind": "function", "doc": "<p>fit the model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.survtrace_adapters.SurvTraceSingle.predict", "modulename": "survhive.survtrace_adapters", "qualname": "SurvTraceSingle.predict", "kind": "function", "doc": "<p>do a prediction using a fit model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">eval_times</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.survtrace_adapters.SurvTraceSingle.predict_survival", "modulename": "survhive.survtrace_adapters", "qualname": "SurvTraceSingle.predict_survival", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.survtrace_adapters.SurvTraceSingle.get_parameter_grid", "modulename": "survhive.survtrace_adapters", "qualname": "SurvTraceSingle.get_parameter_grid", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">max_width</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.survtrace_adapters.SurvTraceSingle.set_predict_request", "modulename": "survhive.survtrace_adapters", "qualname": "SurvTraceSingle.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.util", "modulename": "survhive.util", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "survhive.util.load_test_data", "modulename": "survhive.util", "qualname": "load_test_data", "kind": "function", "doc": "<p>Load standard breast-cancer dataset for testing</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span><span class=\"o\">=</span><span class=\"s1\">&#39;breast_cancer&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.util.get_indicator", "modulename": "survhive.util", "qualname": "get_indicator", "kind": "function", "doc": "<p>Get censoring indicator (bool)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.util.get_time", "modulename": "survhive.util", "qualname": "get_time", "kind": "function", "doc": "<p>Get the time of the event</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.util.event_quantiles", "modulename": "survhive.util", "qualname": "event_quantiles", "kind": "function", "doc": "<p>get the times corresponding to the specified quantile fractions of events</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">quantiles</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.25</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.75</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.util.survival_train_test_split", "modulename": "survhive.util", "qualname": "survival_train_test_split", "kind": "function", "doc": "<p>Split survival data into train and test set using event-label stratification</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.25</span>, </span><span class=\"param\"><span class=\"n\">rng_seed</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "survhive.util.survival_crossval_splitter", "modulename": "survhive.util", "qualname": "survival_crossval_splitter", "kind": "function", "doc": "<p>a RepeatedStratifiedKFold CV splitter stratified according to survival events</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">n_splits</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">n_repeats</span><span class=\"o\">=</span><span class=\"mi\">2</span>, </span><span class=\"param\"><span class=\"n\">rng_seed</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();